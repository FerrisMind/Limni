import { spawn, ChildProcess } from 'child_process';
import path from 'path';
import { chromium } from '@playwright/test';
import { fileURLToPath } from 'url';

let tauriProcess: ChildProcess | null = null;

export default async function globalSetup() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');

  // –ü—É—Ç—å –∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–º—É Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
  const __dirname = path.dirname(fileURLToPath(import.meta.url));
  const tauriExePath = path.join(
    __dirname,
    '..',
    '..',
    'src-tauri',
    'target',
    'x86_64-pc-windows-msvc',
    'release',
    'Limni.exe'
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
  const { existsSync } = await import('fs');
  if (!existsSync(tauriExePath)) {
    console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Tauri –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');

    // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const buildProcess = spawn('npm', ['run', 'tauri', 'build'], {
      stdio: 'inherit',
      shell: true,
      cwd: path.join(__dirname, '..', '..'),
    });

    await new Promise((resolve, reject) => {
      buildProcess.on('close', (code) => {
        if (code === 0) {
          console.log('‚úÖ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ');
          resolve(void 0);
        } else {
          reject(new Error(`–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º ${code}`));
        }
      });
    });
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å remote debugging
  tauriProcess = spawn(tauriExePath, [], {
    env: {
      ...process.env,
      WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS: '--remote-debugging-port=9222',
    },
    stdio: 'pipe',
  });

  if (tauriProcess.stdout) {
    tauriProcess.stdout.on('data', (data) => {
      console.log(`Tauri stdout: ${data}`);
    });
  }

  if (tauriProcess.stderr) {
    tauriProcess.stderr.on('data', (data) => {
      console.log(`Tauri stderr: ${data}`);
    });
  }

  // –ñ–¥–µ–º, –ø–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∏ remote debugging —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ remote debugging –ø–æ—Ä—Ç–∞...');

  let attempts = 0;
  const maxAttempts = 30; // 30 —Å–µ–∫—É–Ω–¥

  while (attempts < maxAttempts) {
    try {
      const browser = await chromium.connectOverCDP('http://localhost:9222');
      const contexts = browser.contexts();
      if (contexts.length > 0) {
        await browser.close();
        console.log('‚úÖ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
        break;
      }
      await browser.close();
    } catch {
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
    }

    await new Promise((resolve) => setTimeout(resolve, 1000));
    attempts++;
  }

  if (attempts >= maxAttempts) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —á–µ—Ä–µ–∑ remote debugging');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è teardown
  if (tauriProcess && tauriProcess.pid) {
    process.env.TAURI_PID = tauriProcess.pid.toString();
  }
}
