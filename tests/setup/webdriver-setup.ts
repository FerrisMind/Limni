import { spawn, ChildProcess } from 'child_process';
import { fileURLToPath } from 'url';
import path from 'path';

let tauriDriverProcess: ChildProcess | null = null;

export default async function globalSetup() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ tauri-driver –¥–ª—è WebDriver —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ tauri-driver
  try {
    const { execSync } = await import('child_process');
    execSync('tauri-driver --version', { stdio: 'pipe' });
    console.log('‚úÖ tauri-driver –Ω–∞–π–¥–µ–Ω');
  } catch {
    console.error('‚ùå tauri-driver –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:');
    console.error('cargo install tauri-driver');
    process.exit(1);
  }

  // –ü—É—Ç—å –∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
  const __dirname = path.dirname(fileURLToPath(import.meta.url));
  const tauriExePath = path.join(
    __dirname,
    '..',
    '..',
    'src-tauri',
    'target',
    'x86_64-pc-windows-msvc',
    'release',
    'Limni.exe'
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
  const { existsSync } = await import('fs');
  if (!existsSync(tauriExePath)) {
    console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Tauri –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');

    // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const { execSync } = await import('child_process');
    execSync('npm run tauri:build', {
      stdio: 'inherit',
      cwd: path.join(__dirname, '..', '..'),
    });

    console.log('‚úÖ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ');
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º tauri-driver
  tauriDriverProcess = spawn(
    'tauri-driver',
    [
      '--port',
      '4444',
      '--native-driver',
      'msedgedriver.exe', // –î–ª—è Windows
      tauriExePath,
    ],
    {
      stdio: 'pipe',
    }
  );

  if (tauriDriverProcess.stdout) {
    tauriDriverProcess.stdout.on('data', (data) => {
      console.log(`tauri-driver stdout: ${data}`);
    });
  }

  if (tauriDriverProcess.stderr) {
    tauriDriverProcess.stderr.on('data', (data) => {
      console.log(`tauri-driver stderr: ${data}`);
    });
  }

  // –ñ–¥–µ–º, –ø–æ–∫–∞ tauri-driver –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ tauri-driver...');

  let attempts = 0;
  const maxAttempts = 30; // 30 —Å–µ–∫—É–Ω–¥

  while (attempts < maxAttempts) {
    try {
      const http = await import('http');
      await new Promise((resolve, reject) => {
        const req = http.get('http://localhost:4444/status', (res) => {
          resolve(res);
        });
        req.on('error', reject);
        req.setTimeout(1000, () => {
          req.destroy();
          reject(new Error('Timeout'));
        });
      });

      console.log('‚úÖ tauri-driver –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
      break;
    } catch {
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
    }

    await new Promise((resolve) => setTimeout(resolve, 1000));
    attempts++;
  }

  if (attempts >= maxAttempts) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ tauri-driver');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è teardown
  if (tauriDriverProcess && tauriDriverProcess.pid) {
    process.env.TAURI_DRIVER_PID = tauriDriverProcess.pid.toString();
  }
}
