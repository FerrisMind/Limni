export default async function globalTeardown() {
  console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');

  const tauriPid = process.env.TAURI_PID;

  if (tauriPid) {
    try {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      if (process.platform === 'win32') {
        // –ù–∞ Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º taskkill
        const { spawn } = await import('child_process');
        const killProcess = spawn('taskkill', ['/PID', tauriPid, '/F'], {
          stdio: 'pipe',
        });

        await new Promise((resolve) => {
          killProcess.on('close', () => {
            console.log('‚úÖ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            resolve(void 0);
          });
        });
      } else {
        // –ù–∞ Unix-—Å–∏—Å—Ç–µ–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º kill
        process.kill(parseInt(tauriPid), 'SIGTERM');
        console.log('‚úÖ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    }
  } else {
    console.log('‚ÑπÔ∏è  PID Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}
