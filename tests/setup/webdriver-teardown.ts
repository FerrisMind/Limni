export default async function globalTeardown() {
  console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ tauri-driver –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');

  const tauriDriverPid = process.env.TAURI_DRIVER_PID;

  if (tauriDriverPid) {
    try {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å tauri-driver
      if (process.platform === 'win32') {
        // –ù–∞ Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º taskkill
        const { spawn } = await import('child_process');
        const killProcess = spawn('taskkill', ['/PID', tauriDriverPid, '/F'], {
          stdio: 'pipe',
        });

        await new Promise((resolve) => {
          killProcess.on('close', () => {
            console.log('‚úÖ tauri-driver —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
            resolve(void 0);
          });
        });
      } else {
        // –ù–∞ Unix-—Å–∏—Å—Ç–µ–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º kill
        process.kill(parseInt(tauriDriverPid), 'SIGTERM');
        console.log('‚úÖ tauri-driver —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ tauri-driver:', error);
    }
  } else {
    console.log('‚ÑπÔ∏è  PID tauri-driver –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}
