import { test, expect, chromium } from '@playwright/test';

test.describe('Limni Tauri Application - Native Tests', () => {
  let browser: any;
  let page: any;

  test.beforeAll(async () => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —á–µ—Ä–µ–∑ CDP
    browser = await chromium.connectOverCDP('http://localhost:9222');
    const contexts = browser.contexts();
    
    if (contexts.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –≤ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
    }
    
    // –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å Tauri API
    let tauriPage = null;
    for (const context of contexts) {
      const pages = context.pages();
      for (const testPage of pages) {
        try {
          // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          await testPage.waitForLoadState('networkidle', { timeout: 10000 });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Tauri API —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
          await testPage.waitForFunction(
            () => {
              return typeof window.__TAURI__ !== 'undefined' && 
                     window.__TAURI__.core !== undefined;
            },
            { timeout: 15000 }
          );
          tauriPage = testPage;
          break;
        } catch {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
          continue;
        }
      }
      if (tauriPage) break;
    }
    
    if (!tauriPage) {
      // Fallback –∫ –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const context = contexts[0];
      const pages = context.pages();
      if (pages.length === 0) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
      }
      tauriPage = pages[0];
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–∞–∂–µ –¥–ª—è fallback
      await tauriPage.waitForLoadState('networkidle', { timeout: 10000 });
      console.log('‚ö†Ô∏è Tauri API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å Tauri API');
    }
    
    page = tauriPage;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é');
  });

  test.afterAll(async () => {
    if (browser) {
      await browser.close();
    }
  });

  test('should have correct window title', async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const title = await page.title();
    expect(title).toContain('Limni');
    console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞: ${title}`);
  });

  test('should load main application UI', async () => {
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await page.waitForLoadState('networkidle', { timeout: 30000 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ body –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
    const body = page.locator('body');
    await expect(body).toBeVisible();

    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π UI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω');
  });

  test('should have working Tauri APIs', async () => {
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Tauri API —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    const tauriAvailable = await page.waitForFunction(
      () => {
        return typeof window.__TAURI__ !== 'undefined' && 
               window.__TAURI__.core !== undefined &&
               typeof window.__TAURI__.core.invoke === 'function';
      },
      { timeout: 20000 }
    ).then(() => true).catch(() => false);
    
    expect(tauriAvailable).toBe(true);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö API
    if (tauriAvailable) {
      const apiCheck = await page.evaluate(() => {
        const tauri = window.__TAURI__;
        return {
          hasCore: typeof tauri.core !== 'undefined',
          hasInvoke: typeof tauri.core.invoke === 'function',
          hasEvent: typeof tauri.event !== 'undefined',
          hasWindow: typeof tauri.webviewWindow !== 'undefined'
        };
      });
      
      expect(apiCheck.hasCore).toBe(true);
      expect(apiCheck.hasInvoke).toBe(true);
      expect(apiCheck.hasEvent).toBe(true);
      expect(apiCheck.hasWindow).toBe(true);
      
      console.log('‚úÖ Tauri API –∏ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
    }
  });

  test('should handle window interactions', async () => {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–∫–Ω–æ–º (–∫–ª–∏–∫–∏, –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞)
    const body = page.locator('body');
    await expect(body).toBeVisible();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    await body.click();

    console.log('‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–∫–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  test('should maintain window state', async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫–Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–º
    const isVisible = await page.isVisible('body');
    expect(isVisible).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ —á–µ—Ä–µ–∑ evaluate –¥–ª—è Tauri
    const windowInfo = await page.evaluate(() => {
      return {
        innerWidth: window.innerWidth,
        innerHeight: window.innerHeight,
        outerWidth: window.outerWidth,
        outerHeight: window.outerHeight,
        viewport: {
          width: document.documentElement.clientWidth,
          height: document.documentElement.clientHeight
        }
      };
    });
    
    expect(windowInfo.innerWidth).toBeGreaterThan(0);
    expect(windowInfo.innerHeight).toBeGreaterThan(0);
    expect(windowInfo.viewport.width).toBeGreaterThan(0);
    expect(windowInfo.viewport.height).toBeGreaterThan(0);

    console.log(`üìê –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: ${windowInfo.innerWidth}x${windowInfo.innerHeight}`);
    console.log(`üìê Viewport: ${windowInfo.viewport.width}x${windowInfo.viewport.height}`);
  });

  test('should handle keyboard and mouse events', async () => {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –º—ã—à–∏
    const body = page.locator('body');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    await body.press('Tab');
    await page.waitForTimeout(500);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
    await body.hover();
    await page.waitForTimeout(500);

    console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –º—ã—à–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
  });
});
