use tauri::{Manager, LogicalPosition, LogicalSize, AppHandle, WebviewUrl, Position, Size, Emitter};
use tauri::webview::WebviewBuilder;
use crate::state::{WebviewState, HEADER_HEIGHT};
use crate::utils::{fetch_favicon_backend, fetch_page_title_backend, get_title_from_url};

/// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π CHILD webview –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ (embedded, –Ω–∏–∂–µ UI)
pub async fn create_tab_webview_impl(
    app: AppHandle,
    tab_id: String,
    url: String,
    _title: String,
) -> Result<String, String> {
    let webview_label = format!("tab-{}", tab_id);
    
    // –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    let main_window = app.get_window("main")
        .ok_or("Main window not found")?;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
    let window_size = main_window.inner_size()
        .map_err(|e| format!("Failed to get window size: {}", e))?;
    
    // –°–æ–∑–¥–∞–µ–º webview URL
    let webview_url = if url.starts_with("http://") || url.starts_with("https://") {
        WebviewUrl::External(url.parse().map_err(|e| format!("Invalid URL: {}", e))?)
    } else {
        WebviewUrl::App("index.html".into())
    };
    
    // –ö–õ–Æ–ß–ï–í–û–ï –û–¢–õ–ò–ß–ò–ï: —Å–æ–∑–¥–∞–µ–º CHILD WebView, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∏–∂–µ UI
    let webview_builder = WebviewBuilder::new(webview_label.clone(), webview_url)
        .auto_resize() // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
        .transparent(false) // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        .focused(false) // Child WebView –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Ñ–æ–∫—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        .on_navigation({
            let app_handle = app.clone();
            let tab_id_clone = tab_id.clone();
            move |url| {
                let url_string = url.to_string();
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL –≤–æ frontend
                let _ = app_handle.emit("webview-url-changed", serde_json::json!({
                    "tabId": tab_id_clone,
                    "url": url_string.clone()
                }));
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º title –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                let url_based_title = get_title_from_url(&url_string);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è title (–ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å)
                let _ = app_handle.emit("webview-title-changed", serde_json::json!({
                    "tabId": tab_id_clone,
                    "title": url_based_title
                }));
                
                println!("ü¶Ä Rust: Navigation title update: '{}' for tab: {}", url_based_title, tab_id_clone);
                
                true // –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            }
        })
        .on_page_load({
            let app_handle = app.clone();
            let tab_id_clone = tab_id.clone();
            move |webview, _payload| {
                println!("ü¶Ä Rust: on_page_load triggered for tab: {}", tab_id_clone);
                let app_clone = app_handle.clone();
                let tab_id_clone_inner = tab_id_clone.clone();
                
                // –ü–æ–ª—É—á–∞–µ–º title –∏ favicon –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                tauri::async_runtime::spawn(async move {
                    handle_page_load(app_clone, tab_id_clone_inner, webview).await;
                });
            }
        })
        .initialization_script(get_webview_initialization_script());
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–¥ header –ø–∞–Ω–µ–ª—è–º–∏
    let position = Position::Logical(LogicalPosition::new(0.0, HEADER_HEIGHT));
    let size = Size::Logical(LogicalSize::new(
        window_size.width as f64, 
        window_size.height as f64 - HEADER_HEIGHT
    ));
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º add_child –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è embedded WebView
    // Child WebView –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∂–µ UI —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
    let webview = main_window.add_child(webview_builder, position, size)
        .map_err(|e| format!("Failed to create child webview: {}", e))?;
    
    // –°–∫—Ä—ã–≤–∞–µ–º webview –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–æ –æ–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∏–∂–µ UI)
    webview.hide().map_err(|e| format!("Failed to hide webview: {}", e))?;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ webview
    let state = app.state::<WebviewState>();
    let mut webviews = state.webviews.lock().unwrap();
    webviews.insert(tab_id.clone(), webview_label.clone());
    
    Ok(webview_label)
}

/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç webview –≤–∫–ª–∞–¥–∫–∏
pub async fn show_tab_webview_impl(
    app: AppHandle,
    tab_id: String,
) -> Result<(), String> {
    let state = app.state::<WebviewState>();
    let webviews = state.webviews.lock().unwrap();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –î–†–£–ì–ò–ï webview'—ã (–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π)
    for (other_tab_id, webview_label) in webviews.iter() {
        if other_tab_id != &tab_id {
            if let Some(webview) = app.get_webview(webview_label) {
                let _ = webview.hide(); // –°–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ WebView
            }
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π webview –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if let Some(webview_label) = webviews.get(&tab_id) {
        if let Some(webview) = app.get_webview(webview_label) {
            webview.show().map_err(|e| format!("Failed to show webview: {}", e))?;
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ webview –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
            let main_window = app.get_window("main")
                .ok_or("Main window not found")?;
            let window_size = main_window.inner_size()
                .map_err(|e| format!("Failed to get window size: {}", e))?;
            
            let position = Position::Logical(LogicalPosition::new(0.0, HEADER_HEIGHT));
            let size = Size::Logical(LogicalSize::new(
                window_size.width as f64, 
                window_size.height as f64 - HEADER_HEIGHT
            ));
            
            let _ = webview.set_position(position);
            let _ = webview.set_size(size);
        } else {
            return Err("Webview not found".to_string());
        }
    }
    // –ï—Å–ª–∏ webview –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, about:blank), –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ
    
    Ok(())
}

/// –°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ webview'—ã (–¥–ª—è about:blank –≤–∫–ª–∞–¥–æ–∫)
pub async fn hide_all_webviews_impl(app: AppHandle) -> Result<(), String> {
    let state = app.state::<WebviewState>();
    let webviews = state.webviews.lock().unwrap();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ webview'—ã
    for webview_label in webviews.values() {
        if let Some(webview) = app.get_webview(webview_label) {
            let _ = webview.hide(); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏
        }
    }
    
    Ok(())
}

/// –ó–∞–∫—Ä—ã–≤–∞–µ—Ç webview –≤–∫–ª–∞–¥–∫–∏
pub async fn close_tab_webview_impl(
    app: AppHandle,
    tab_id: String,
) -> Result<(), String> {
    let state = app.state::<WebviewState>();
    let mut webviews = state.webviews.lock().unwrap();
    
    if let Some(webview_label) = webviews.remove(&tab_id) {
        if let Some(webview) = app.get_webview(&webview_label) {
            webview.close().map_err(|e| format!("Failed to close webview: {}", e))?;
        }
    }
    
    Ok(())
}

/// –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ webview
pub async fn navigate_webview_impl(
    app: AppHandle,
    tab_id: String,
    url: String,
) -> Result<(), String> {
    let state = app.state::<WebviewState>();
    let webviews = state.webviews.lock().unwrap();
    
    if let Some(webview_label) = webviews.get(&tab_id) {
        if let Some(webview) = app.get_webview(webview_label) {
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º webview
            let webview_url = if url.starts_with("http://") || url.starts_with("https://") || url.starts_with("file://") {
                url.parse().map_err(|e| format!("Invalid URL: {}", e))?
            } else {
                return Err(format!("Unsupported URL scheme for navigation: {}", url));
            };
            
            webview.navigate(webview_url)
                .map_err(|e| format!("Failed to navigate webview: {}", e))?;
            
            println!("ü¶Ä Rust: Navigated existing webview for tab {} to {}", tab_id, url);
            Ok(())
        } else {
            Err("Webview not found".to_string())
        }
    } else {
        Err("Tab not found".to_string())
    }
}

/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async fn handle_page_load(app_clone: AppHandle, tab_id_clone_inner: String, webview: tauri::Webview) {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;
    
    // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è favicon
    if let Ok(current_url) = webview.url() {
        let url_str = current_url.to_string();
        
        // –ù–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ title —á–µ—Ä–µ–∑ –æ—Ü–µ–Ω–∫—É JavaScript
        let title_script = get_title_detection_script();
        
        println!("ü¶Ä Rust: Injecting title script for tab: {}", tab_id_clone_inner);
        let _ = webview.eval(&title_script);
        
        // –î–µ—Ç–µ–∫—Ü–∏—è –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
        let media_detection_script = get_media_detection_script();
        
        if let Ok(_) = webview.eval(media_detection_script) {
            // –ü–æ—Å–∫–æ–ª—å–∫—É eval –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Result —Å—Ä–∞–∑—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            println!("ü¶Ä Rust: Media detection executed for tab: {}", tab_id_clone_inner);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true –¥–ª—è YouTube)
            let has_audio = url_str.contains("youtube.com") || url_str.contains("vimeo.com") || url_str.contains("soundcloud.com");
            let _ = app_clone.emit("webview-audio-changed", serde_json::json!({
                "tabId": tab_id_clone_inner,
                "hasAudio": has_audio,
                "isAudioMuted": false
            }));
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
        setup_periodic_media_check(app_clone.clone(), tab_id_clone_inner.clone(), webview.clone()).await;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ DOM –∏ –∑–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ–º title
        setup_title_extraction(app_clone.clone(), tab_id_clone_inner.clone(), webview.clone()).await;
        
        // –ü–æ–ª—É—á–∞–µ–º favicon –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        if url_str != "about:blank" && url_str.starts_with("http") {
            let app_clone_favicon = app_clone.clone();
            let tab_id_favicon = tab_id_clone_inner.clone();
            let url_for_favicon = url_str.clone();
            tauri::async_runtime::spawn(async move {
                match fetch_favicon_backend(url_for_favicon).await {
                    Ok(favicon_data) => {
                        let _ = app_clone_favicon.emit("webview-favicon-changed", serde_json::json!({
                            "tabId": tab_id_favicon,
                            "favicon": favicon_data
                        }));
                    },
                    Err(err) => {
                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å favicon, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º null
                        let _ = app_clone_favicon.emit("webview-favicon-changed", serde_json::json!({
                            "tabId": tab_id_favicon,
                            "favicon": null
                        }));
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                        if err.to_string().contains("connection") || err.to_string().contains("timeout") {
                            let error_message = format!("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {}", err);
                            let _ = app_clone_favicon.emit("webview-load-error", serde_json::json!({
                                "tabId": tab_id_favicon,
                                "errorMessage": error_message
                            }));
                        }
                    }
                }
            });
        }

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É
        if url_str != "about:blank" && url_str.starts_with("http") {
            let app_clone_title_real = app_clone.clone();
            let tab_id_title_real = tab_id_clone_inner.clone();
            let url_for_title = url_str.clone();
            tauri::async_runtime::spawn(async move {
                match fetch_page_title_backend(url_for_title).await {
                    Ok(real_title) => {
                        let _ = app_clone_title_real.emit("webview-title-changed", serde_json::json!({
                            "tabId": tab_id_title_real,
                            "title": real_title
                        }));
                        println!("ü¶Ä Rust: Real title set to '{}' for tab: {}", real_title, tab_id_title_real);
                    },
                    Err(err) => {
                        println!("ü¶Ä Rust: Failed to fetch page title: {}", err);
                    }
                }
            });
        }
    }
}

/// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
async fn setup_periodic_media_check(_app_clone: AppHandle, _tab_id: String, webview: tauri::Webview) {
    tauri::async_runtime::spawn(async move {
        let mut interval = tokio::time::interval(tokio::time::Duration::from_secs(3));
        let mut check_count = 0;
        const MAX_CHECKS: u32 = 100; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
        
        loop {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫
            if check_count >= MAX_CHECKS {
                println!("ü¶Ä Rust: Media check limit reached, stopping periodic check");
                break;
            }
            
            interval.tick().await;
            check_count += 1;
            
            let periodic_script = r#"
                (function() {
                    let hasAudio = false;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º audio —ç–ª–µ–º–µ–Ω—Ç—ã
                    document.querySelectorAll('audio').forEach(audio => {
                        if (!audio.paused && audio.currentTime > 0) {
                            hasAudio = true;
                        }
                    });
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º video —ç–ª–µ–º–µ–Ω—Ç—ã
                    document.querySelectorAll('video').forEach(video => {
                        if (!video.paused && video.currentTime > 0) {
                            hasAudio = true;
                        }
                    });
                    
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è YouTube
                    if (window.location.hostname.includes('youtube.com')) {
                        const player = document.querySelector('video');
                        if (player && !player.paused && player.currentTime > 0) {
                            hasAudio = true;
                        }
                    }
                    
                    return hasAudio;
                })()
            "#;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ webview –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            if webview.eval(periodic_script).is_err() {
                println!("ü¶Ä Rust: WebView no longer accessible, stopping media check");
                break;
            }
            
            tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;
        }
    });
}

/// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ title –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
async fn setup_title_extraction(app_clone: AppHandle, tab_id: String, webview: tauri::Webview) {
    tauri::async_runtime::spawn(async move {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        tokio::time::sleep(tokio::time::Duration::from_millis(1000)).await;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º title –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        let extract_title_script = r#"
            (function() {
                const title = document.title || document.querySelector('title')?.textContent || '–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞';
                console.log('üåê WebView: Title extraction after load:', title);
                return title;
            })()
        "#;
        
        if let Ok(_) = webview.eval(extract_title_script) {
            // –ü–æ–ª—É—á–∞–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è title
            if let Ok(current_url) = webview.url() {
                let url_str = current_url.to_string();
                let fallback_title = get_title_from_url(&url_str);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è title
                let _ = app_clone.emit("webview-title-changed", serde_json::json!({
                    "tabId": tab_id,
                    "title": fallback_title
                }));
                
                println!("ü¶Ä Rust: Fallback title set to '{}' for tab: {}", fallback_title, tab_id);
            }
        }
    });
}

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è webview
fn get_webview_initialization_script() -> &'static str {
    r#"
        // Child WebView –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Tauri API
        function safeTauriInvoke(command, args) {
            return new Promise(function(resolve, reject) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tauri API
                if (typeof window.__TAURI__ !== 'undefined' && 
                    window.__TAURI__.core && 
                    typeof window.__TAURI__.core.invoke === 'function') {
                    window.__TAURI__.core.invoke(command, args)
                        .then(resolve)
                        .catch(reject);
                } else {
                    // –ï—Å–ª–∏ Tauri API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–æ–º–∏—Å
                    reject(new Error('Tauri API not available'));
                }
            });
        }
        
        // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–æ–≤
        function initLinkHandlers() {
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º –¥–ª—è –æ–±—Ö–æ–¥–∞ opener plugin
            document.addEventListener('click', function(event) {
                // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Å—Å—ã–ª–∫—É
                let target = event.target;
                while (target && target.tagName !== 'A') {
                    target = target.parentElement;
                }
                
                if (target && target.href && target.href.startsWith('http')) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞
                    if (target.hostname !== window.location.hostname) {
                        event.preventDefault();
                        
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ opener plugin
                        safeTauriInvoke('open_url_in_new_tab', {
                            url: target.href
                        }).catch(function(error) {
                            console.error('Failed to open URL in new tab:', error);
                            // Fallback - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–æ–π –∂–µ –≤–∫–ª–∞–¥–∫–µ
                            window.location.href = target.href;
                        });
                    }
                }
            }, true);
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            document.body.style.margin = '0';
            document.body.style.padding = '0';
            // Child WebView –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∂–µ UI —Ä–æ–¥–∏—Ç–µ–ª—è
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
            initLinkHandlers();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            setTimeout(function() {
                if (typeof window.__TAURI__ === 'undefined') {
                    console.log('Tauri API still not available, using fallback navigation');
                }
            }, 100);
        });
    "#
}

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ title
fn get_title_detection_script() -> String {
    r#"
        (function() {
            console.log('üåê WebView: Executing title detection script');
            
            const title = document.title || document.querySelector('title')?.textContent || '–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞';
            console.log('üåê WebView: Found title:', title);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π title –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            window._lastDetectedTitle = title;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ title
            if (!window._titleObserverSet) {
                // MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ title
                const titleObserver = new MutationObserver(() => {
                    const newTitle = document.title || document.querySelector('title')?.textContent || '–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞';
                    if (newTitle !== window._lastDetectedTitle) {
                        console.log('üåê WebView: Title changed to:', newTitle);
                        window._lastDetectedTitle = newTitle;
                        window._pendingTitleUpdate = newTitle;
                    }
                });
                
                titleObserver.observe(document.querySelector('head') || document.documentElement, {
                    subtree: true,
                    childList: true
                });
                
                // –¢–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä—è–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è document.title
                let originalTitleSetter = Object.getOwnPropertyDescriptor(Document.prototype, 'title')?.set;
                if (originalTitleSetter) {
                    Object.defineProperty(document, 'title', {
                        set: function(value) {
                            originalTitleSetter.call(this, value);
                            console.log('üåê WebView: Title set via property to:', value);
                            window._lastDetectedTitle = value;
                            window._pendingTitleUpdate = value;
                        },
                        get: function() {
                            return this.querySelector('title')?.textContent || '';
                        }
                    });
                }
                
                window._titleObserverSet = true;
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º title –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            return title;
        })();
    "#.to_string()
}

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
fn get_media_detection_script() -> &'static str {
    r#"
        (function() {
            let hasAudio = false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º audio —ç–ª–µ–º–µ–Ω—Ç—ã
            document.querySelectorAll('audio').forEach(audio => {
                if (!audio.paused || audio.readyState > 0) {
                    hasAudio = true;
                }
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º video —ç–ª–µ–º–µ–Ω—Ç—ã
            document.querySelectorAll('video').forEach(video => {
                if (!video.paused || video.readyState > 0) {
                    hasAudio = true;
                }
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º iframe (YouTube, Vimeo –∏ —Ç.–¥.)
            if (document.querySelectorAll('iframe[src*="youtube.com"], iframe[src*="vimeo.com"], iframe[src*="soundcloud.com"]').length > 0) {
                hasAudio = true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Web Audio API
            if (window.AudioContext || window.webkitAudioContext) {
                hasAudio = true;
            }
            
            return hasAudio;
        })()
    "#
}