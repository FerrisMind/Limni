use tauri::{AppHandle, Manager, Emitter};
use crate::state::WebviewState;
use crate::webview::{create_tab_webview_impl, show_tab_webview_impl, hide_all_webviews_impl, close_tab_webview_impl, navigate_webview_impl};
use std::time::SystemTime;

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ CHILD webview –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ (embedded, –Ω–∏–∂–µ UI)
#[tauri::command]
pub async fn create_tab_webview(
    app: AppHandle,
    tab_id: String,
    url: String,
    title: String,
) -> Result<String, String> {
    create_tab_webview_impl(app, tab_id, url, title).await
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ webview –≤–∫–ª–∞–¥–∫–∏
#[tauri::command]
pub async fn show_tab_webview(
    app: AppHandle,
    tab_id: String,
) -> Result<(), String> {
    show_tab_webview_impl(app, tab_id).await
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö webview'–æ–≤ (–¥–ª—è about:blank –≤–∫–ª–∞–¥–æ–∫)
#[tauri::command]
pub async fn hide_all_webviews(app: AppHandle) -> Result<(), String> {
    hide_all_webviews_impl(app).await
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è webview –≤–∫–ª–∞–¥–∫–∏
#[tauri::command]
pub async fn close_tab_webview(
    app: AppHandle,
    tab_id: String,
) -> Result<(), String> {
    close_tab_webview_impl(app, tab_id).await
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ webview
#[tauri::command]
pub async fn navigate_webview(
    app: AppHandle,
    tab_id: String,
    url: String,
) -> Result<(), String> {
    navigate_webview_impl(app, tab_id, url).await
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ URL webview
#[tauri::command]
pub async fn get_webview_url(
    app: AppHandle,
    tab_id: String,
) -> Result<String, String> {
    let state = app.state::<WebviewState>();
    let webviews = state.webviews.lock().unwrap();
    
    if let Some(webview_label) = webviews.get(&tab_id) {
        if let Some(webview) = app.get_webview(webview_label) {
            match webview.url() {
                Ok(url) => Ok(url.to_string()),
                Err(e) => Err(format!("Failed to get webview URL: {}", e))
            }
        } else {
            Err("Webview not found".to_string())
        }
    } else {
        Err("Tab not found".to_string())
    }
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è title –≤–∫–ª–∞–¥–∫–∏ –∏–∑ JavaScript injection
#[tauri::command]
pub async fn update_webview_title(
    app: AppHandle,
    tab_id: String,
    title: String,
) -> Result<(), String> {
    println!("ü¶Ä Rust: Received title update: '{}' for tab: {}", title, tab_id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ title –≤–æ frontend
    app.emit("webview-title-changed", serde_json::json!({
        "tabId": tab_id,
        "title": title
    })).map_err(|e| format!("Failed to emit title change event: {}", e))?;
    
    println!("ü¶Ä Rust: Title event emitted successfully");
    Ok(())
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
#[tauri::command]
pub async fn navigate_to_home(
    app: AppHandle,
    tab_id: String,
    home_url: Option<String>,
) -> Result<(), String> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π URL –∏–ª–∏ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let url = home_url.unwrap_or_else(|| "https://www.google.com".to_string());
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigate_webview_impl(app, tab_id, url).await
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞ webview
#[tauri::command]
pub async fn mute_webview(
    app: AppHandle,
    tab_id: String,
) -> Result<(), String> {
    let state = app.state::<WebviewState>();
    let webviews = state.webviews.lock().unwrap();
    
    if let Some(webview_label) = webviews.get(&tab_id) {
        if let Some(webview) = app.get_webview(webview_label) {
            // –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞ –≤—Å–µ—Ö –º–µ–¥–∏–∞—ç–ª–µ–º–µ–Ω—Ç–æ–≤
            let script = get_mute_script();
            
            webview.eval(script)
                .map_err(|e| format!("Failed to mute webview: {}", e))?;
            
            println!("ü¶Ä Rust: Webview muted for tab: {}", tab_id);
            Ok(())
        } else {
            Err("Webview not found".to_string())
        }
    } else {
        Err("Tab not found".to_string())
    }
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞ webview
#[tauri::command]
pub async fn unmute_webview(
    app: AppHandle,
    tab_id: String,
) -> Result<(), String> {
    let state = app.state::<WebviewState>();
    let webviews = state.webviews.lock().unwrap();
    
    if let Some(webview_label) = webviews.get(&tab_id) {
        if let Some(webview) = app.get_webview(webview_label) {
            // –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞ –≤—Å–µ—Ö –º–µ–¥–∏–∞—ç–ª–µ–º–µ–Ω—Ç–æ–≤
            let script = get_unmute_script();
            
            webview.eval(script)
                .map_err(|e| format!("Failed to unmute webview: {}", e))?;
            
            println!("ü¶Ä Rust: Webview unmuted for tab: {}", tab_id);
            Ok(())
        } else {
            Err("Webview not found".to_string())
        }
    } else {
        Err("Tab not found".to_string())
    }
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è URL –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ opener plugin)
#[tauri::command]
pub async fn open_url_in_new_tab(
    app: AppHandle,
    url: String,
) -> Result<String, String> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
    let timestamp = SystemTime::now()
        .duration_since(SystemTime::UNIX_EPOCH)
        .map(|d| d.as_nanos())
        .unwrap_or(0);
    let tab_id = format!("tab_{}", timestamp);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π webview –¥–ª—è —ç—Ç–æ–≥–æ URL
    let webview_label = create_tab_webview_impl(app.clone(), tab_id.clone(), url.clone(), "–ó–∞–≥—Ä—É–∑–∫–∞...".to_string()).await?;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ –≤–æ frontend
    app.emit("new-tab-created", serde_json::json!({
        "tabId": tab_id,
        "url": url,
        "title": "–ó–∞–≥—Ä—É–∑–∫–∞...",
        "webviewLabel": webview_label
    })).map_err(|e| format!("Failed to emit new tab event: {}", e))?;
    
    Ok(tab_id)
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webview'–∞—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
#[tauri::command]
pub async fn get_webview_info(app: AppHandle) -> Result<Vec<String>, String> {
    let state = app.state::<WebviewState>();
    let webviews = state.webviews.lock().unwrap();
    
    let mut info = Vec::new();
    for (tab_id, webview_label) in webviews.iter() {
        let exists = app.get_webview(webview_label).is_some();
        info.push(format!("Tab: {}, Label: {}, Exists: {}", tab_id, webview_label, exists));
    }
    
    Ok(info)
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
#[tauri::command]
pub async fn fetch_favicon_backend(url: String) -> Result<String, String> {
    crate::utils::fetch_favicon_backend(url).await
}

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
fn get_mute_script() -> &'static str {
    r#"
        (function() {
            // –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ –≤—Å–µ—Ö audio —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            document.querySelectorAll('audio').forEach(audio => {
                audio.muted = true;
            });
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ –≤—Å–µ—Ö video —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            document.querySelectorAll('video').forEach(video => {
                video.muted = true;
            });
            
            // –î–ª—è YouTube –∏ –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤ —Å iframe
            document.querySelectorAll('iframe').forEach(iframe => {
                try {
                    iframe.contentWindow.postMessage('{"event":"command","func":"mute","args":[]}', '*');
                } catch(e) {}
            });
            
            console.log('üîá Tab muted');
        })();
    "#
}

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
fn get_unmute_script() -> &'static str {
    r#"
        (function() {
            // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ –≤—Å–µ—Ö audio —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            document.querySelectorAll('audio').forEach(audio => {
                audio.muted = false;
            });
            
            // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ –≤—Å–µ—Ö video —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            document.querySelectorAll('video').forEach(video => {
                video.muted = false;
            });
            
            // –î–ª—è YouTube –∏ –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤ —Å iframe
            document.querySelectorAll('iframe').forEach(iframe => {
                try {
                    iframe.contentWindow.postMessage('{"event":"command","func":"unMute","args":[]}', '*');
                } catch(e) {}
            });
            
            console.log('üîä Tab unmuted');
        })();
    "#
}

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–æ–≤
#[cfg(test)]
mod tests;