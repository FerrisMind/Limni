import type {
  Tab,
  BrowserState,
  Bookmark,
  HistoryEntry,
  BrowserSettings,
} from '../types/browser.js';
import { invoke } from '@tauri-apps/api/core';
import { listen } from '@tauri-apps/api/event';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function generateId(): string {
  return Math.random().toString(36).substr(2, 9);
}

// üëâ NEW: Utility that helps us decide whether a title is "generic"
// (i.e. search engine home pages, host names, placeholders, etc.)
function isGenericTitle(title: string | undefined, url: string | undefined): boolean {
  if (!title) return true;

  const genericTitles = new Set([
    '–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞',
    '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
    '–Ø–Ω–¥–µ–∫—Å',
    'Google',
    'GitHub',
    'Microsoft Bing',
    '–ó–∞–≥—Ä—É–∑–∫–∞...',
    '–ó–∞–≥—Ä—É–∑–∫–∞',
  ]);

  const trimmed = title.trim();
  if (genericTitles.has(trimmed)) return true;

  if (url) {
    try {
      const hostname = new URL(url).hostname.replace(/^www\./, '');
      const domainPart = hostname.split('.')[0];
      if (
        trimmed.toLowerCase() === hostname.toLowerCase() ||
        trimmed.toLowerCase() === domainPart.toLowerCase()
      ) {
        return true;
      }
    } catch {
      /* malformed url ‚Äì ignore */
    }
  }

  // Short 1-word titles are usually generic as well
  if (!trimmed.includes(' ') && trimmed.length <= 6) return true;

  return false;
}

// üëâ Utility to decode HTML entities which come from fallback JS (&#1040; etc.)
function decodeHtmlEntities(str: string | undefined): string {
  if (!str) return '';
  // Fast check: if no entity marker, return as is
  if (!/&[#a-zA-Z0-9]+;/.test(str)) return str;
  const textarea = document.createElement('textarea');
  textarea.innerHTML = str;
  return textarea.value;
}

function isLoadingPlaceholder(title: string | undefined): boolean {
  if (!title) return false;
  const trimmed = title.trim();
  return trimmed === '–ó–∞–≥—Ä—É–∑–∫–∞...' || trimmed === '–ó–∞–≥—Ä—É–∑–∫–∞';
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞–±–∞
function createTab(url: string = 'about:blank', title: string = '–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞'): Tab {
  return {
    id: generateId(),
    title,
    url,
    isActive: false,
    isLoading: false,
    history: [url],
    historyIndex: 0,
    webviewLabel: undefined,
    favicon: undefined, // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ favicon –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ undefined
    hasAudio: false, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–≤—É–∫–∞ –Ω–µ—Ç
    isAudioMuted: false, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–≤—É–∫ –Ω–µ –∑–∞–≥–ª—É—à–µ–Ω
    hasError: false, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—à–∏–±–æ–∫ –Ω–µ—Ç
    errorMessage: undefined, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–µ—Ç
  };
}

// –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞
export const browserState = $state<BrowserState>({
  tabs: [],
  activeTabId: null,
  showBookmarks: false,
  showHistory: false,
  showSettings: false,
  showExtensions: false,
  showDownloads: false,
  showMainMenu: false,
});

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞
export const windowState = $state({
  isMaximized: false,
});

// –ó–∞–∫–ª–∞–¥–∫–∏
export const bookmarks = $state<Bookmark[]>([
  {
    id: generateId(),
    title: 'Google',
    url: 'https://www.google.com',
    createdAt: new Date(),
  },
  {
    id: generateId(),
    title: 'GitHub',
    url: 'https://github.com',
    createdAt: new Date(),
  },
]);

// –ò—Å—Ç–æ—Ä–∏—è
export const history = $state<HistoryEntry[]>([]);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
export const settings = $state<BrowserSettings>({
  homepage: 'https://www.google.com',
  searchEngine: 'google',
  downloadPath: '',
  theme: 'system',
  allowJavaScript: true,
  allowImages: true,
  allowCookies: true,
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
export async function addTab(
  url: string = 'about:blank',
  title: string = '–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞'
): Promise<void> {
  // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–µ about:blank, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ ¬´–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶¬ª
  const initialTitle = url === 'about:blank' ? title : '–ó–∞–≥—Ä—É–∑–∫–∞...';
  const newTab = createTab(url, initialTitle);
  browserState.tabs.push(newTab);

  try {
    // –°–æ–∑–¥–∞–µ–º webview –¥–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ about:blank
    if (url !== 'about:blank') {
      const webviewLabel = await invoke<string>('create_tab_webview', {
        tabId: newTab.id,
        url: url,
        title: '–ó–∞–≥—Ä—É–∑–∫–∞...',
      });

      newTab.webviewLabel = webviewLabel;
      newTab.isLoading = true;

      // –ò—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º ‚Äì –¥–æ–∂–¥—ë–º—Å—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–≤–∏–∫–æ–Ω –¥–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
      try {
        const faviconDataUrl = await invoke<string>('fetch_favicon_backend', { url: url });
        newTab.favicon = faviconDataUrl;
      } catch (error) {
        console.error(`Failed to fetch favicon for ${url} via backend:`, error);
        newTab.favicon = undefined; // –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
      }
    }

    setActiveTab(newTab.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è webview:', error);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å webview, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –∫–∞–∫ placeholder
  }
}

export async function closeTab(tabId: string): Promise<void> {
  const tabIndex = browserState.tabs.findIndex((tab) => tab.id === tabId);
  if (tabIndex === -1) return;

  const tab = browserState.tabs[tabIndex];
  const isActive = tab.isActive;

  try {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º webview –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (tab.webviewLabel) {
      await invoke('close_tab_webview', { tabId: tabId });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è webview:', error);
  }

  browserState.tabs.splice(tabIndex, 1);

  if (browserState.tabs.length === 0) {
    addTab();
    return;
  }

  if (isActive) {
    const newActiveIndex = Math.min(tabIndex, browserState.tabs.length - 1);
    setActiveTab(browserState.tabs[newActiveIndex].id);
  }
}

export async function setActiveTab(tabId: string): Promise<void> {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    browserState.tabs.forEach((tab) => {
      tab.isActive = tab.id === tabId;
    });
    browserState.activeTabId = tabId;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π webview –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ
    const activeTab = browserState.tabs.find((t) => t.id === tabId);
    if (activeTab) {
      if (activeTab.webviewLabel && activeTab.url !== 'about:blank') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º webview –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å URL
        await invoke('show_tab_webview', { tabId: tabId });
      } else {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ webview'—ã –¥–ª—è about:blank –∏–ª–∏ –≤–∫–ª–∞–¥–æ–∫ –±–µ–∑ webview
        await invoke('hide_all_webviews');
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
  }
}

export async function updateTabUrl(tabId: string, url: string, _title?: string): Promise<void> {
  const tab = browserState.tabs.find((t) => t.id === tabId);
  if (!tab) return;

  try {
    tab.isLoading = true;
    tab.hasError = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    tab.errorMessage = undefined;

    // –ï—Å–ª–∏ —É –≤–∫–ª–∞–¥–∫–∏ —É–∂–µ –µ—Å—Ç—å webview, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    if (tab.webviewLabel && url !== 'about:blank') {
      try {
        await invoke('navigate_webview', {
          tabId: tabId,
          url: url,
        });
        console.log('üîÑ Navigated existing webview for tab:', tabId, 'to:', url);
      } catch (error) {
        console.error('Navigation failed, creating new webview:', error);
        // –ï—Å–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π webview
        await invoke('close_tab_webview', { tabId: tabId });
        tab.webviewLabel = undefined;
        
        const webviewLabel = await invoke<string>('create_tab_webview', {
          tabId: tabId,
          url: url,
          title: '–ó–∞–≥—Ä—É–∑–∫–∞...',
        });
        tab.webviewLabel = webviewLabel;
        
        if (tab.isActive) {
          await invoke('show_tab_webview', { tabId: tabId });
        }
      }
    } else {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webview –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (tab.webviewLabel) {
        try {
          await invoke('close_tab_webview', { tabId: tabId });
          tab.webviewLabel = undefined; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç–∫—É —Å—Ç–∞—Ä–æ–≥–æ webview
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ä–æ–≥–æ webview –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
        }
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π webview –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–¥–ª—è about:blank –Ω–µ —Å–æ–∑–¥–∞–µ–º)
      if (url !== 'about:blank') {
        const webviewLabel = await invoke<string>('create_tab_webview', {
          tabId: tabId,
          url: url,
          title: '–ó–∞–≥—Ä—É–∑–∫–∞...',
        });

        tab.webviewLabel = webviewLabel;

        // –ï—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π webview
        if (tab.isActive) {
          await invoke('show_tab_webview', { tabId: tabId });
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ ‚Äì –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶¬ª
    tab.url = url;
    tab.title = '–ó–∞–≥—Ä—É–∑–∫–∞...';

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –≤–∫–ª–∞–¥–∫–∏
    if (tab.history[tab.historyIndex] !== url) {
      tab.history = tab.history.slice(0, tab.historyIndex + 1);
      tab.history.push(url);
      tab.historyIndex = tab.history.length - 1;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â—É—é –∏—Å—Ç–æ—Ä–∏—é
    if (url !== 'about:blank' && !url.startsWith('about:')) {
      // –ò—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—à–µ–º —Å URL, –ø–æ–∑–∂–µ –æ–±–Ω–æ–≤–∏–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      addToHistory(tab.title, url);

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º favicon –∏ title –ø–æ—Å–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      // –≠—Ç–∏ –≤—ã–∑–æ–≤—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É–±—Ä–∞–Ω—ã, –µ—Å–ª–∏ on_page_load –∏ on_navigation —Å—Ç–∞–Ω—É—Ç –Ω–∞–¥–µ–∂–Ω—ã–º–∏
      try {
        const faviconDataUrl = await invoke<string>('fetch_favicon_backend', { url: url });
        tab.favicon = faviconDataUrl;
      } catch (error) {
        console.error(`Failed to fetch favicon for ${url} via backend:`, error);
        tab.favicon = undefined;
      }

      try {
        const realTitle = await invoke<string>('fetch_page_title_backend', { url: url });
        tab.title = realTitle;
      } catch (error) {
        console.error(`Failed to fetch real title for ${url} via backend:`, error);
      }
    }

    tab.isLoading = false; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
    tab.isLoading = false;
  }
}

export async function navigateBack(tabId: string): Promise<void> {
  const tab = browserState.tabs.find((t) => t.id === tabId);
  if (!tab || tab.historyIndex <= 0) return;

  tab.historyIndex--;
  const url = tab.history[tab.historyIndex];

  try {
    // –ï—Å–ª–∏ —É –≤–∫–ª–∞–¥–∫–∏ –Ω–µ—Ç webview, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!tab.webviewLabel && url !== 'about:blank') {
      const webviewLabel = await invoke<string>('create_tab_webview', {
        tabId: tabId,
        url: url,
        title: '–ó–∞–≥—Ä—É–∑–∫–∞...',
      });

      tab.webviewLabel = webviewLabel;

      // –ï—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º webview
      if (tab.isActive) {
        await invoke('show_tab_webview', { tabId: tabId });
      }
    } else if (tab.webviewLabel && url !== 'about:blank') {
      // –ù–∞–≤–∏–≥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webview
      await invoke('navigate_webview', {
        tabId: tabId,
        url: url,
      });
    }

    tab.url = url;

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    const historyEntry = history.find((h) => h.url === url);
    if (historyEntry) {
      tab.title = historyEntry.title;
      console.log('üîô Restored title from history:', historyEntry.title, 'for URL:', url);
    } else {
      // –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
      tab.title = url === 'about:blank' ? '–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞' : '–ó–∞–≥—Ä—É–∑–∫–∞...';
      console.log('üîô No history entry found, set temporary title for URL:', url);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–≤–∏–∫–æ–Ω –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö URL)
    if (url !== 'about:blank' && !url.startsWith('about:')) {
      try {
        const faviconDataUrl = await invoke<string>('fetch_favicon_backend', { url: url });
        tab.favicon = faviconDataUrl;
      } catch (error) {
        console.error(`Failed to fetch favicon for ${url} via backend:`, error);
        tab.favicon = undefined;
      }
    } else {
      tab.favicon = undefined; // –û—á–∏—â–∞–µ–º favicon –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö URL
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥:', error);
  }
}

export async function navigateForward(tabId: string): Promise<void> {
  const tab = browserState.tabs.find((t) => t.id === tabId);
  if (!tab || tab.historyIndex >= tab.history.length - 1) return;

  tab.historyIndex++;
  const url = tab.history[tab.historyIndex];

  try {
    // –ï—Å–ª–∏ —É –≤–∫–ª–∞–¥–∫–∏ –Ω–µ—Ç webview, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!tab.webviewLabel && url !== 'about:blank') {
      const webviewLabel = await invoke<string>('create_tab_webview', {
        tabId: tabId,
        url: url,
        title: '–ó–∞–≥—Ä—É–∑–∫–∞...',
      });

      tab.webviewLabel = webviewLabel;

      // –ï—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º webview
      if (tab.isActive) {
        await invoke('show_tab_webview', { tabId: tabId });
      }
    } else if (tab.webviewLabel && url !== 'about:blank') {
      // –ù–∞–≤–∏–≥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webview
      await invoke('navigate_webview', {
        tabId: tabId,
        url: url,
      });
    }

    tab.url = url;

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    const historyEntry = history.find((h) => h.url === url);
    if (historyEntry) {
      tab.title = historyEntry.title;
      console.log('üîú Restored title from history:', historyEntry.title, 'for URL:', url);
    } else {
      // –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
      tab.title = url === 'about:blank' ? '–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞' : '–ó–∞–≥—Ä—É–∑–∫–∞...';
      console.log('üîú No history entry found, set temporary title for URL:', url);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–≤–∏–∫–æ–Ω –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–ø–µ—Ä–µ–¥ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö URL)
    if (url !== 'about:blank' && !url.startsWith('about:')) {
      try {
        const faviconDataUrl = await invoke<string>('fetch_favicon_backend', { url: url });
        tab.favicon = faviconDataUrl;
      } catch (error) {
        console.error(`Failed to fetch favicon for ${url} via backend:`, error);
        tab.favicon = undefined;
      }
    } else {
      tab.favicon = undefined; // –û—á–∏—â–∞–µ–º favicon –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö URL
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–ø–µ—Ä–µ–¥:', error);
  }
}

export async function reloadTab(tabId: string): Promise<void> {
  const tab = browserState.tabs.find((t) => t.id === tabId);
  if (!tab) return;

  try {
    tab.isLoading = true;

    if (tab.webviewLabel && tab.url !== 'about:blank') {
      // –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–≤–∏–∫–æ–Ω —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö URL)
      if (!tab.url.startsWith('about:')) {
        try {
          const faviconDataUrl = await invoke<string>('fetch_favicon_backend', { url: tab.url });
          tab.favicon = faviconDataUrl;
        } catch (error) {
          console.error(`Failed to fetch favicon for ${tab.url} via backend:`, error);
          tab.favicon = undefined;
        }
      } else {
        tab.favicon = undefined; // –û—á–∏—â–∞–µ–º favicon –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö URL
      }
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ —Ç–æ—Ç –∂–µ URL
      await invoke('navigate_webview', {
        tabId: tabId,
        url: tab.url,
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', error);
    tab.isLoading = false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
export async function navigateToHome(tabId: string): Promise<void> {
  const tab = browserState.tabs.find((t) => t.id === tabId);
  if (!tab) return;

  console.log('üè† Navigate to home called for tab:', tabId, 'current URL:', tab.url);
  tab.isLoading = true;

  try {
    // –ï—Å–ª–∏ —É –≤–∫–ª–∞–¥–∫–∏ –Ω–µ—Ç webview, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!tab.webviewLabel) {
      console.log('üè† Creating webview for tab:', tabId);
      const webviewLabel = await invoke<string>('create_tab_webview', {
        tabId,
        url: settings.homepage,
        title: '–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
      });
      console.log('üè† Webview created:', webviewLabel);

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º webviewLabel –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏
      tab.webviewLabel = webviewLabel;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º webview –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
      if (browserState.activeTabId === tabId) {
        console.log('üè† Showing webview for active tab:', tabId);
        await invoke('show_tab_webview', { tabId });
      }
    } else {
      console.log('üè† Navigating existing webview for tab:', tabId);
      // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö webview –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
      await invoke('navigate_webview', {
        tabId,
        url: settings.homepage,
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º URL –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    tab.url = settings.homepage;
    tab.title = '–ó–∞–≥—Ä—É–∑–∫–∞...';

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –≤–∫–ª–∞–¥–∫–∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π URL
    if (tab.history[tab.historyIndex] !== settings.homepage) {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
      tab.history = tab.history.slice(0, tab.historyIndex + 1);
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π URL
      tab.history.push(settings.homepage);
      tab.historyIndex = tab.history.length - 1;
    }

    console.log('üè† Navigation completed for tab:', tabId);
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ webview-url-changed
  } catch (error) {
    console.error('üè† Failed to navigate to home:', error);
    tab.isLoading = false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ webview'–æ–≤
export async function getWebviewInfo(): Promise<string[]> {
  try {
    return await invoke<string[]>('get_webview_info');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webview:', error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–∫–ª–∞–¥–æ–∫
export function addBookmark(title: string, url: string): void {
  const bookmark: Bookmark = {
    id: generateId(),
    title,
    url,
    createdAt: new Date(),
  };
  bookmarks.push(bookmark);
}

export function removeBookmark(bookmarkId: string): void {
  const index = bookmarks.findIndex((b) => b.id === bookmarkId);
  if (index !== -1) {
    bookmarks.splice(index, 1);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
export function addToHistory(title: string, url: string): void {
  const existingEntry = history.find((h) => h.url === url);

  if (existingEntry) {
    existingEntry.visitedAt = new Date();
    existingEntry.visitCount++;
  } else {
    const historyEntry: HistoryEntry = {
      id: generateId(),
      title,
      url,
      visitedAt: new Date(),
      visitCount: 1,
    };
    history.unshift(historyEntry);
  }

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 1000 –∑–∞–ø–∏—Å–µ–π
  if (history.length > 1000) {
    history.splice(1000);
  }
}

export function clearHistory(): void {
  history.splice(0);
}

// –ì–µ—Ç—Ç–µ—Ä—ã
export function getActiveTab(): Tab | undefined {
  return browserState.tabs.find((tab) => tab.isActive);
}

export function canGoBack(tabId: string): boolean {
  const tab = browserState.tabs.find((t) => t.id === tabId);
  return tab ? tab.historyIndex > 0 : false;
}

export function canGoForward(tabId: string): boolean {
  const tab = browserState.tabs.find((t) => t.id === tabId);
  return tab ? tab.historyIndex < tab.history.length - 1 : false;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
if (browserState.tabs.length === 0) {
  addTab('about:blank', '–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è URL –≤ webview
listen<{ tabId: string; url: string }>('webview-url-changed', (event) => {
  const { tabId, url } = event.payload;
  const tab = browserState.tabs.find((t) => t.id === tabId);
  if (tab) {
    tab.url = url;
    // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º isLoading –∑–¥–µ—Å—å ‚Äì –∂–¥—ë–º favicon

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∫–ª–∞–¥–∫–∏ –µ—Å–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (tab.history[tab.historyIndex] !== url) {
      tab.history = tab.history.slice(0, tab.historyIndex + 1);
      tab.history.push(url);
      tab.historyIndex = tab.history.length - 1;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ about:blank
    if (url !== 'about:blank') {
      addToHistory(tab.title, url);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–æ–∫ –∏–∑ webview
listen<{ tabId: string; url: string; title: string; webviewLabel: string }>(
  'new-tab-created',
  (event) => {
    const { tabId, url, title, webviewLabel } = event.payload;

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const newTab: Tab = {
      id: tabId,
      title: title,
      url: url,
      isActive: false,
      isLoading: true,
      favicon: undefined,
      history: [url],
      historyIndex: 0,
      webviewLabel: webviewLabel,
      hasAudio: false,
      isAudioMuted: false,
    };

    browserState.tabs.push(newTab);
    setActiveTab(tabId); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    if (url !== 'about:blank') {
      addToHistory(title, url);
    }
  }
);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è title –≤ webview
listen<{ tabId: string; title: string }>('webview-title-changed', (event) => {
  console.log('üîç Title event received:', event.payload);
  const { tabId, title } = event.payload;
  const decoded = decodeHtmlEntities(title);
  const tab = browserState.tabs.find((t) => t.id === tabId);
  console.log('üîç Found tab:', tab ? `${tab.id} - current title: "${tab.title}"` : 'NOT FOUND');
  console.log('üîç Raw title:', title, 'Decoded:', decoded);

  if (!tab) {
    console.log('üîç Tab not found, skipping title update');
    return; // safety guard
  }

  const newIsGeneric = isGenericTitle(decoded, tab.url);
  const currentIsGeneric = isGenericTitle(tab.title, tab.url);
  const currentIsLoading = isLoadingPlaceholder(tab.title);

  console.log('üîç Title analysis:', {
    newIsGeneric,
    currentIsGeneric,
    currentIsLoading,
    currentTitle: tab.title,
    newTitle: decoded,
    tabUrl: tab.url,
  });

  // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –≥–µ–Ω–µ—Ä–∏—á–µ—Å–∫–∏–π
  // –∏–ª–∏ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–µ–Ω–µ—Ä–∏—á–µ—Å–∫–∏–π/–∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π
  const shouldUpdate =
    decoded &&
    decoded.trim() &&
    decoded !== 'undefined' &&
    decoded !== 'null' &&
    decoded !== tab.title &&
    (!newIsGeneric || currentIsGeneric || currentIsLoading);

  console.log('üîç Should update title:', shouldUpdate);

  if (shouldUpdate) {
    console.log('üîç ‚úÖ Updating title from "' + tab.title + '" to "' + decoded + '"');
    tab.title = decoded;
    tab.isLoading = false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  } else {
    console.log('üîç ‚ùå Title update skipped - same title or invalid');
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è favicon –≤ webview
listen<{ tabId: string; favicon: string | null }>('webview-favicon-changed', (event) => {
  const { tabId, favicon } = event.payload;
  const tab = browserState.tabs.find((t) => t.id === tabId);
  if (tab) {
    tab.favicon = favicon || undefined;
    // –ï—Å–ª–∏ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, —Å—á–∏—Ç–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π
    if (favicon) {
      tab.isLoading = false;
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞ –≤–∫–ª–∞–¥–∫–∏
export async function toggleTabAudio(tabId: string) {
  const tab = getTab(tabId);
  if (tab) {
    try {
      if (tab.isAudioMuted) {
        // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
        await invoke('unmute_webview', { tabId });
        setTabAudioState(tabId, false);
      } else {
        // –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
        await invoke('mute_webview', { tabId });
        setTabAudioState(tabId, true);
      }
    } catch (error) {
      console.error('Failed to toggle tab audio:', error);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤—É–∫–∞ –≤–∫–ª–∞–¥–∫–∏
export function setTabAudioState(tabId: string, isMuted: boolean) {
  browserState.tabs = browserState.tabs.map((tab) =>
    tab.id === tabId ? { ...tab, isAudioMuted: isMuted } : tab
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ª–∏—á–∏—è –∑–≤—É–∫–∞ —É –≤–∫–ª–∞–¥–∫–∏
export function setTabHasAudio(tabId: string, hasAudio: boolean) {
  browserState.tabs = browserState.tabs.map((tab) =>
    tab.id === tabId ? { ...tab, hasAudio, isAudioMuted: hasAudio ? tab.isAudioMuted : false } : tab
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
export function setTabError(tabId: string, errorMessage: string) {
  const tab = getTab(tabId);
  if (tab) {
    tab.hasError = true;
    tab.errorMessage = errorMessage;
    tab.isLoading = false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
export function clearTabError(tabId: string) {
  const tab = getTab(tabId);
  if (tab) {
    tab.hasError = false;
    tab.errorMessage = undefined;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤—É–∫–∞
listen<{ tabId: string; hasAudio: boolean }>('webview-audio-changed', (event) => {
  const { tabId, hasAudio } = event.payload;
  setTabHasAudio(tabId, hasAudio);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è mute
listen<{ tabId: string; isMuted: boolean }>('webview-mute-changed', (event) => {
  const { tabId, isMuted } = event.payload;
  setTabAudioState(tabId, isMuted);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
listen<{ tabId: string; errorMessage: string }>('webview-load-error', (event) => {
  console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ ${event.payload.tabId}:`, event.payload.errorMessage);
  setTabError(event.payload.tabId, event.payload.errorMessage);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –ø–æ ID
function getTab(tabId: string) {
  return browserState.tabs.find((tab) => tab.id === tabId);
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–∞ browser –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AddressBar
export const browser = {
  get currentTab() {
    return getActiveTab();
  },
  updateTabUrl,
};
