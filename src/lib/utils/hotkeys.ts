import {
  getActiveTab,
  closeTab,
  browserState,
  setActiveTab,
  addTab,
} from '../stores/browser.svelte.js';
import { invoke } from '@tauri-apps/api/core';

export type HotkeyHandler = {
  handleReload: () => Promise<void>;
  handleCtrlL: () => void;
  handleNewTab: () => Promise<void>; // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –°—Ü–µ–Ω–∞—Ä–∏—è 4.1
  isInputElement: (target: EventTarget | null) => boolean;
  shouldIgnoreEvent: (event: KeyboardEvent) => boolean;
  handleKeydownEvent: (event: KeyboardEvent) => Promise<void>;
  handleNewWindow: () => Promise<void>;
  handleCloseWindow: () => Promise<void>;
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
 * –°—Ü–µ–Ω–∞—Ä–∏–∏ 13.1, 13.2, 13.3, 4.1 –∏–∑ MVP
 */
export function createHotkeyHandler(): HotkeyHandler {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å—Ü–µ–Ω–∞—Ä–∏–∏ 13.1 –∏ 13.3)
  async function handleReload(): Promise<void> {
    const activeTab = getActiveTab();
    if (activeTab) {
      console.log('üîÑ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏', activeTab.id);
      await invoke('navigate_webview', {
        tabId: activeTab.id,
        url: activeTab.url,
      });
      // –°–∏–º—É–ª–∏—Ä—É–µ–º isLoading –¥–ª—è UI
      activeTab.isLoading = true;
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã UI –ø–æ–∫–∞–∑–∞–ª –∑–∞–≥—Ä—É–∑–∫—É
      setTimeout(() => {
        activeTab.isLoading = false;
      }, 500);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ (—Å—Ü–µ–Ω–∞—Ä–∏–π 4.1)
  async function handleNewTab(): Promise<void> {
    console.log('‚ûï –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏');
    await addTab(); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
  async function handleNewWindow(): Promise<void> {
    console.log('‚ûï –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞');
    await invoke('create_new_window');
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
  async function handleCloseWindow(): Promise<void> {
    console.log('‚úñÔ∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞');
    await invoke('close_current_window');
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É (—Å—Ü–µ–Ω–∞—Ä–∏–π 13.2)
  function handleCtrlL(): void {
    console.log('üéØ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: —Ñ–æ–∫—É—Å –Ω–∞ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º custom event –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è AddressBar
    const focusEvent = new CustomEvent('focusAddressBar');
    document.dispatchEvent(focusEvent);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
  function isInputElement(target: EventTarget | null): boolean {
    if (!target) return false;

    const element = target as HTMLElement;
    return (
      element.tagName === 'INPUT' ||
      element.tagName === 'TEXTAREA' ||
      element.contentEditable === 'true'
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
  function shouldIgnoreEvent(event: KeyboardEvent): boolean {
    const isInput = isInputElement(event.target);

    // –î–ª—è Ctrl+L, Ctrl+T, Ctrl+W, Ctrl+N, Ctrl+Shift+N, Ctrl+Tab, Ctrl+Shift+Tab —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –≤ input –ø–æ–ª—è—Ö
    if (
      (event.ctrlKey || event.metaKey) &&
      (event.key === 'l' || event.key === 'w' || event.key === 'n' || event.key === 'Tab')
    ) {
      return false;
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤ input –ø–æ–ª—è—Ö
    return isInput;
  }

  // –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  async function handleKeydownEvent(event: KeyboardEvent): Promise<void> {
    if (shouldIgnoreEvent(event)) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (Ctrl/Cmd) –Ω–µ –Ω–∞–∂–∞—Ç—ã, –Ω–æ —ç—Ç–æ Ctrl+L, —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (!(event.ctrlKey || event.metaKey) && event.key === 'l') {
      return;
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 13.1: Ctrl+R –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if ((event.ctrlKey || event.metaKey) && event.key === 'r') {
      event.preventDefault();
      await handleReload();
      return;
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 13.3: F5 –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (event.key === 'F5') {
      event.preventDefault();
      await handleReload();
      return;
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 4.1: Ctrl+T –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
    if ((event.ctrlKey || event.metaKey) && event.key === 't' && !event.shiftKey) {
      event.preventDefault();
      await handleNewTab();
      return;
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 13.2: Ctrl+L –¥–ª—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    if ((event.ctrlKey || event.metaKey) && event.key === 'l') {
      event.preventDefault();
      handleCtrlL();
      return;
    }

    // Ctrl + W (–∏–ª–∏ Cmd + W –Ω–∞ Mac) - –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É
    if ((event.ctrlKey || event.metaKey) && event.key === 'w') {
      event.preventDefault();
      const activeTab = getActiveTab();
      if (activeTab) {
        await closeTab(activeTab.id);
      }
      return;
    }

    // Ctrl + N (–∏–ª–∏ Cmd + N –Ω–∞ Mac) - –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
    if ((event.ctrlKey || event.metaKey) && event.key === 'n' && !event.shiftKey) {
      event.preventDefault();
      await handleNewWindow();
      return;
    }

    // Ctrl + Shift + N (–∏–ª–∏ Cmd + Shift + N –Ω–∞ Mac) - –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –æ–∫–Ω–æ (–≤ –±—É–¥—É—â–µ–º)
    if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'N') {
      event.preventDefault();
      // await handleNewPrivateWindow(); // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –æ–∫–Ω–æ
      console.log('Private window hotkey pressed (Ctrl+Shift+N)');
      return;
    }

    // Ctrl + Shift + W (–∏–ª–∏ Cmd + Shift + W –Ω–∞ Mac) - –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
    if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'W') {
      event.preventDefault();
      await handleCloseWindow();
      return;
    }

    // Ctrl + Tab - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ (–≤–ø–µ—Ä–µ–¥)
    if ((event.ctrlKey || event.metaKey) && event.key === 'Tab' && !event.shiftKey) {
      event.preventDefault();
      const tabs = browserState.tabs;
      if (tabs.length <= 1) return;

      const activeIndex = tabs.findIndex((tab) => tab.isActive);
      let nextIndex = (activeIndex + 1) % tabs.length;
      if (tabs[nextIndex].url === 'about:blank' && tabs.length > 1 && !tabs[nextIndex].isActive) {
        nextIndex = (nextIndex + 1) % tabs.length;
      }
      await setActiveTab(tabs[nextIndex].id);
      return;
    }

    // Ctrl + Shift + Tab - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ (–Ω–∞–∑–∞–¥)
    if ((event.ctrlKey || event.metaKey) && event.key === 'Tab' && event.shiftKey) {
      event.preventDefault();
      const tabs = browserState.tabs;
      if (tabs.length <= 1) return;

      const activeIndex = tabs.findIndex((tab) => tab.isActive);
      let prevIndex = (activeIndex - 1 + tabs.length) % tabs.length;
      if (tabs[prevIndex].url === 'about:blank' && tabs.length > 1 && !tabs[prevIndex].isActive) {
        prevIndex = (prevIndex - 1 + tabs.length) % tabs.length;
      }
      await setActiveTab(tabs[prevIndex].id);
      return;
    }
  }

  return {
    handleReload,
    handleCtrlL,
    handleNewTab, // –î–æ–±–∞–≤–ª–µ–Ω–æ
    isInputElement,
    shouldIgnoreEvent,
    handleKeydownEvent,
    handleNewWindow,
    handleCloseWindow,
  };
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
 */
export function initializeGlobalHotkeys(): () => void {
  const hotkeyHandler = createHotkeyHandler();

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è async —Ñ—É–Ω–∫—Ü–∏–∏
  const keydownListener = (event: KeyboardEvent) => {
    hotkeyHandler.handleKeydownEvent(event).catch(console.error);
  };

  document.addEventListener('keydown', keydownListener);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
  return () => {
    document.removeEventListener('keydown', keydownListener);
  };
}
