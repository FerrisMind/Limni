import { getActiveTab, reloadTab } from '../stores/browser.svelte.js';

export type HotkeyHandler = {
  handleReload: () => Promise<void>;
  handleCtrlL: () => void;
  isInputElement: (target: EventTarget | null) => boolean;
  shouldIgnoreEvent: (event: KeyboardEvent) => boolean;
  handleKeydownEvent: (event: KeyboardEvent) => Promise<void>;
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
 * –°—Ü–µ–Ω–∞—Ä–∏–∏ 13.1, 13.2, 13.3 –∏–∑ MVP
 */
export function createHotkeyHandler(): HotkeyHandler {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å—Ü–µ–Ω–∞—Ä–∏–∏ 13.1 –∏ 13.3)
  async function handleReload(): Promise<void> {
    const activeTab = getActiveTab();
    if (activeTab) {
      console.log('üîÑ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏', activeTab.id);
      await reloadTab(activeTab.id);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É (—Å—Ü–µ–Ω–∞—Ä–∏–π 13.2)
  function handleCtrlL(): void {
    console.log('üéØ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: —Ñ–æ–∫—É—Å –Ω–∞ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º custom event –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è AddressBar
    const focusEvent = new CustomEvent('focusAddressBar');
    document.dispatchEvent(focusEvent);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
  function isInputElement(target: EventTarget | null): boolean {
    if (!target) return false;

    const element = target as HTMLElement;
    return (
      element.tagName === 'INPUT' ||
      element.tagName === 'TEXTAREA' ||
      element.contentEditable === 'true'
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
  function shouldIgnoreEvent(event: KeyboardEvent): boolean {
    const isInput = isInputElement(event.target);

    // –î–ª—è Ctrl+L —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –≤ input –ø–æ–ª—è—Ö
    if (event.ctrlKey && event.key === 'l') {
      return false;
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤ input –ø–æ–ª—è—Ö
    return isInput;
  }

  // –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  async function handleKeydownEvent(event: KeyboardEvent): Promise<void> {
    if (shouldIgnoreEvent(event)) {
      return;
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 13.1: Ctrl+R –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (event.ctrlKey && event.key === 'r') {
      event.preventDefault();
      await handleReload();
      return;
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 13.3: F5 –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (event.key === 'F5') {
      event.preventDefault();
      await handleReload();
      return;
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 13.2: Ctrl+L –¥–ª—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    if (event.ctrlKey && event.key === 'l') {
      event.preventDefault();
      handleCtrlL();
      return;
    }
  }

  return {
    handleReload,
    handleCtrlL,
    isInputElement,
    shouldIgnoreEvent,
    handleKeydownEvent,
  };
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
 */
export function initializeGlobalHotkeys(): () => void {
  const hotkeyHandler = createHotkeyHandler();

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è async —Ñ—É–Ω–∫—Ü–∏–∏
  const keydownListener = (event: KeyboardEvent) => {
    hotkeyHandler.handleKeydownEvent(event).catch(console.error);
  };

  document.addEventListener('keydown', keydownListener);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
  return () => {
    document.removeEventListener('keydown', keydownListener);
  };
}
